# Padrão de projeto criacional

  Nas linguagens de programação clássicas orientada a objetos, um construtor é um método especial usado para inicializar um recém criado objeto que a memória fora
  alocada para isso. No JavaScript, como quase tudo é um objeto, nós estamos frequentemente mais interessados em construtores de objetos.

  Construtores de objetos são usados para criar específicos tipos de objetos - preparando o objeto tanto para uso quanto aceitando argumentos que um construtor pode
  usar para configurar os valores das propriedades e métodos, quando o objeto é criado pela primeira vez.
  
## Prototype

* O que é o Prototype?
  O Prototype é um padrão de projeto criacional que permite copiar objetos existentes sem fazer seu código ficar dependente de suas classes.

* De que forma ele pode funcionar?
  - Problema:
    Digamos que você tenha um objeto, e você quer criar uma cópia exata dele. Como você o faria? Primeiro, você tem que criar um novo objeto da mesma classe. 
    Então você terá que ir por todos os campos do objeto original e copiar seus valores para o novo objeto. Legal! Mas tem uma pegadinha. Nem todos os objetos
    podem ser copiados dessa forma porque alguns campos de objeto podem ser privados e não serão visíveis fora do próprio objeto.
  
  - Solução:
    O padrão Prototype delega o processo de clonagem para o próprio objeto que está sendo clonado. O padrão declara um interface comum para todos os objetos que
    suportam clonagem. Essa interface permite que você clone um objeto sem acoplar seu código à classe daquele objeto. Geralmente, tal interface contém apenas um
    único método clonar. A implementação do método clonar é muito parecida em todas as classes. O método cria um objeto da classe atual e carrega todos os valores
    de campo para do antigo objeto para o novo. Você pode até mesmo copiar campos privados porque a maioria das linguagens de programação permite objetos acessar
    campos privados de outros objetos que pertençam a mesma classe.

    Um objeto que suporta clonagem é chamado de um protótipo. Quando seus objetos têm dúzias de campos e centenas de possíveis configurações, cloná-los pode servir
    como uma alternativa à subclasses.
    
    Funciona assim: você cria um conjunto de objetos, configurados de diversas formas. Quando você precisa um objeto parecido com o que você configurou, você apenas
    clona um protótipo ao invés de construir um novo objeto a partir do nada.
    
## Referências
  
  https://github.com/fhferreira/aprendendo-padroes-de-projeto-javascript
  https://refactoring.guru/pt-br/design-patterns/prototype
